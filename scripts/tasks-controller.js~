tasksController = function() {
	function errorLogger(errorCode, errorMessage) {
		console.log(errorCode +':'+ errorMessage);
	}
	var taskPage;
	var initialised = false;   
	return {

		init : function(page) {
			if (!initialised) {
				taskPage = page;
				$(taskPage).find( '[required="required"]' ).prev('label').append( '<span>*</span>').children( 'span').addClass('required');
				$(taskPage).find('tbody tr:even').addClass( 'even');
				
				$(taskPage).find( '#btnAddTask' ).click( function(evt) {
					evt.preventDefault();
					$(taskPage ).find('#taskCreation' ).removeClass( 'not');
				});
				$(taskPage).find('tbody tr' ).click(function(evt) {
					$(evt.target ).closest('td').siblings( ).andSelf( ).toggleClass( 'rowHighlight');
				});
				$(taskPage).find('#tblTasks tbody').on('click', '.deleteRow', function(evt) { 					
						console.log('teste');
						storageEngine.delete('task', $(evt.target).data().taskId, 
							function() {
								$(evt.target).parents('tr').remove(); 
							}, errorLogger);
					}
				);	
				$(taskPage).find('#saveTask').click(function(evt) {
					evt.preventDefault();
					if ($(taskPage).find('form').valid()) {
						var task = $(taskPage).find('form').toObject();		
						storageEngine.save('task', task, function() {
							$(taskPage).find('#tblTasks tbody').empty();
							tasksController.loadTasks();
							$(':input').val('');
							$(taskPage).find('#taskCreation').addClass('not');
						}, errorLogger);
					}
				});
				storageEngine.init(function() {
						storageEngine.initObjectStore('task', function() {}, 
						errorLogger) 
				}, errorLogger);

				$(taskPage).find('#tblTasks tbody').on('click', '.editRow',function(evt){ 
								$(taskPage).find('#taskCreation').removeClass('not');
								storageEngine.findById('task', $(evt.target).data().taskId, function(task) {
									$(taskPage).find('td').fromObject(task);
								}, errorLogger);
							}
				);

				initialised = true;

			}
    		},

		loadTasks : function() {
			storageEngine.findAll('task', 
				function(tasks) {
					$.each(tasks, function(index, task) {
						$('#taskRow').tmpl(task ).appendTo($(taskPage).find( '#tblTasks tbody'));
					});
				}, 
				errorLogger);
		},
		save: function(type, obj, successCallback, errorCallback) {
			if (!initialized) {
				errorCallback('storage_api_not_initialized', 'The storage engine has not been initialized');
			} else if (!initializedObjectStores[type]) {
				errorCallback('store_not_initialized', 'The object store '+type+' has not been initialized');
			}   
			if (!obj.id) {
				obj.id = $.now();
			}
			function getStorageObject(type) {
				var item = localStorage.getItem(type);
				var parsedItem = JSON.parse(item);
				return parsedItem;
			}


			var storageItem = getStorageObject(type); 

			storageItem[obj.id] = obj;
			localStorage.setItem(type, JSON.stringify(storageItem));
			successCallback(obj);
		},
		
		findByProperty : function(type, propertyName, propertyValue, successCallback, errorCallback) {
			if (!initialized) {
				errorCallback('storage_api_not_initialized', 'The storage engine has not been initialized');
			} else if (!initializedObjectStores[type]) {
				errorCallback('store_not_initialized', 'The object store '+type+' has not been initialized');
			}
			var result = [];
			var storageItem = getStorageObject(type); 
			$.each(storageItem, function(i, v) {
				if (v[propertyName] === propertyValue) {
					result.push(v);
				}
			}); 
			successCallback(result);
		},
		findById : function (type, id, successCallback, errorCallback)	{
			if (!initialized) {
				errorCallback('storage_api_not_initialized', 'The storage engine has not been initialized');
			} else if (!initializedObjectStores[type]) {
				errorCallback('store_not_initialized', 'The object store '+type+' has not been initialized');
			}	
			var storageItem = getStorageObject(type); 
			var result = storageItem[id];
			successCallback(result);
		}

	}

}();




